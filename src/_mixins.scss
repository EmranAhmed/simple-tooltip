// @use "./mixins" as plugin;
// :where([data-storepress-tooltip]){ @include plugin.init("data-storepress-tooltip"); }

@property --tooltip-image {
	syntax: "<url> | none";
	inherits: true;
	initial-value: none;
}

@mixin variables() {
	// Public
	--tooltip-angle: 5px;
	--tooltip-font-size: 15px;
	--tooltip-text-color: #fff;
	--tooltip-background-color: #333;
	--tooltip-image: none;
	--tooltip-max-width: 150px;
	--tooltip-min-height: 30px;
	--tooltip-padding: 10px;
	--tooltip-offset: 5px;
	--tooltip-edge: 2px;
	// Private
	--_tooltip-position: 0px;

	position: relative;
}

@mixin base-style() {
	position: absolute;
	box-sizing: border-box;
	display: none;
	opacity: 0;
	z-index: 999;
	outline: none;
	transition-property: opacity, display;
	transition-duration: 500ms;
	// stylelint-disable-next-line property-no-unknown
	transition-behavior: allow-discrete;

	@media (prefers-reduced-motion: reduce) {
		transition-property: none;
		transition-duration: 0s;
		// stylelint-disable-next-line property-no-unknown
		transition-behavior: unset;
	}
}

@mixin hover-style() {
	display: block;
	visibility: visible;
	opacity: 1;
}

@mixin starting-style() {
	display: block;
	visibility: hidden;
	opacity: 0;
}


@mixin tooltip-style($content-attribute) {
	content: attr(#{$content-attribute});
	max-width: var(--tooltip-max-width);
	min-height: var(--tooltip-min-height);
	background-color: var(--tooltip-background-color);
	color: var(--tooltip-text-color);
	border-radius: 5px;
	font-size: var(--tooltip-font-size);
	text-align: center;
	box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.2);
}


@mixin content-tooltip-style() {
	width: max-content;
	padding: var(--tooltip-padding);
}

@mixin image-tooltip-style() {
	/*width: var(--tooltip-max-width);*/
	aspect-ratio: 1;
	border: solid 4px var(--tooltip-background-color);

	background-image: var(--tooltip-image);
	background-repeat: no-repeat;
	background-size: cover;
	background-position-x: center;
	background-position-y: calc(var(--tooltip-min-height) * -1);

	white-space: nowrap;
	text-overflow: ellipsis; /* Not support on display:flex */
	overflow: hidden;

	// Safari 17.4 with latest browser.
	// See: https://developer.apple.com/documentation/safari-release-notes/safari-17_4-release-notes
	// See: https://caniuse.com/mdn-css_properties_align-content_block_context
	@supports (text-wrap-mode: nowrap) {
		line-height: var(--tooltip-min-height);
		align-content: end; // From Safari 17.4 Added support for align-content on display:block containers.
	}

	@supports not (text-wrap-mode: nowrap) {
		line-height: calc(var(--tooltip-min-height) / 2);
		padding-block-start: calc(var(--tooltip-max-width) - var(--tooltip-min-height));
	}
}

@mixin arrow-style() {
	border: var(--tooltip-angle) solid transparent;
	content: "";
}

@mixin tooltip-position-top() {
	& {
		--x: var(--_content-x);
		--y: calc((100% + var(--tooltip-angle) + var(--tooltip-offset)) * -1);
		translate: var(--x) var(--y);

		left: 50%;
		top: 0;
	}
}

@mixin tooltip-position-bottom() {

	& {
		--x: var(--_content-x);
		--y: calc(100% + var(--tooltip-angle) + var(--tooltip-offset));
		translate: var(--x) var(--y);

		left: 50%;
		bottom: 0;
		top: auto;
	}

}

@mixin arrow-position-top() {

	& {
		--x: var(--_arrow-x);
		--y: calc((var(--tooltip-angle) + var(--tooltip-offset)) * -1);
		translate: var(--x) var(--y);

		border-top-color: var(--tooltip-background-color);
		left: 50%;
		top: 0;
	}
}

@mixin arrow-position-bottom() {

	& {
		--x: var(--_arrow-x);
		--y: calc(var(--tooltip-angle) + var(--tooltip-offset));
		translate: var(--x) var(--y);

		border-top-color: transparent;
		border-bottom-color: var(--tooltip-background-color);
		left: 50%;
		bottom: 0;
		top: auto;
	}

}

@mixin show-state {
	&.ios-safari-hover,
	&:not(.ios-safari-hover):hover,
	&:focus-visible {
		&::before,
		&::after {
			@content;
		}
	}
}

@mixin init($content-attribute: "data-storepress-tooltip") {

	[dir="rtl"] & {
		--_content-x: calc(-50% - var(--_tooltip-position));
	}

	& {

		@include variables();

		--_arrow-x: -50%;
		--_content-x: calc(-50% + var(--_tooltip-position));

		&::before,
		&::after {
			@include base-style();
		}

		&::before {
			@include tooltip-style($content-attribute);
			@include tooltip-position-top();
		}

		&::after {
			@include arrow-style();
			@include arrow-position-top();
		}

		@include show-state {
			@include hover-style();
		}

		// stylelint-disable-next-line scss/at-rule-no-unknown
		@starting-style {
			@include show-state {
				@include starting-style();
			}
		}

		/**
		Support for `@container style()` supported browser.
		Support From Chrome: 111+, Edge: 111+, Safari: 18+, FireFox: N/A, Opera: 97
		 */

		@container style(--tooltip-image: none) {
			&::before {
				@include content-tooltip-style();
			}
		}

		@container not style(--tooltip-image: none) {
			&::before {
				@include image-tooltip-style();
			}
		}

		/**
		Fallback for non `@container style()` supported browser.
		We cannot use `@supports not (@container style(--tooltip-background-image: none))` like this.
		So We use `text-box: normal` css property which have similar support like `@container style()`
		In both safari and firefox.
		See: https://caniuse.com/mdn-css_at-rules_container_style_queries_for_custom_properties
		See: https://caniuse.com/mdn-css_properties_text-box
		 */

		@supports not (text-box: normal) {
			&.storepress-tooltip-type-image::before {
				@include image-tooltip-style();
			}

			&:not(.storepress-tooltip-type-image)::before {
				@include content-tooltip-style();
			}
		}
	}

	&.storepress-tooltip-position-top {
		&::before {
			@include tooltip-position-top();
		}

		&::after {
			@include arrow-position-top();
		}
	}

	&.storepress-tooltip-position-bottom {
		&::before {
			@include tooltip-position-bottom();
		}

		&::after {
			@include arrow-position-bottom();
		}
	}
}
