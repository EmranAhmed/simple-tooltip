// @use "./mixins" as plugin;
// :where([data-storepress-tooltip]){ @include plugin.init("data-storepress-tooltip"); }

@mixin variables() {
	// Public
	--tooltip-angle: 5px;
	--tooltip-font-size: 0.8rem;
	--tooltip-text-color: #fff;
	--tooltip-background-color: #333;
	--tooltip-max-width: 150px;
	--tooltip-min-height: 35px;
	--tooltip-padding: 10px;
	--tooltip-offset: 5px;
	--tooltip-edge: 2px;
	// Private
	--_tooltip-position: 0px;
}

@mixin base-style() {
	position: absolute;
	box-sizing: border-box;
	display: none;
	opacity: 0;
	z-index: 999;
	outline: none;
	transition-property: opacity, display;
	transition-duration: 500ms;
	// stylelint-disable-next-line property-no-unknown
	transition-behavior: allow-discrete;
	@media (prefers-reduced-motion: reduce) {
		transition-property: none;
		transition-duration: 0s;
		// stylelint-disable-next-line property-no-unknown
		transition-behavior: unset;
	}
}

@mixin hover-style() {
	display: block;
	visibility: visible;
	opacity: 1;
}

@mixin starting-style() {
	display: block;
	visibility: hidden;
	opacity: 0;
}

@mixin content-style($content-attribute) {
	content: attr(#{$content-attribute});
	width: max-content;
	max-width: var(--tooltip-max-width);
	min-height: var(--tooltip-min-height);
	background-color: var(--tooltip-background-color);
	color: var(--tooltip-text-color);
	border-radius: 3px;
	padding: var(--tooltip-padding);
	font-size: var(--tooltip-font-size);
	text-align: center;
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
}

@mixin arrow-style() {
	border: var(--tooltip-angle) solid transparent;
	content: "";
}

@mixin content-position-top() {
	--x: var(--_content-x);
	--y: calc((100% + var(--tooltip-angle) + var(--tooltip-offset)) * -1);
	translate: var(--x) var(--y);

	left: 50%;
	top: 0;
}

@mixin content-position-bottom() {
	--x: var(--_content-x);
	--y: calc(100% + var(--tooltip-angle) + var(--tooltip-offset));
	translate: var(--x) var(--y);

	left: 50%;
	bottom: 0;
	top: auto;
}

@mixin arrow-position-top() {
	--x: var(--_arrow-x);
	--y: calc((var(--tooltip-angle) + var(--tooltip-offset)) * -1);
	translate: var(--x) var(--y);

	border-top-color: var(--tooltip-background-color);
	left: 50%;
	top: 0;
}

@mixin arrow-position-bottom() {
	--x: var(--_arrow-x);
	--y: calc(var(--tooltip-angle) + var(--tooltip-offset));
	translate: var(--x) var(--y);

	border-top-color: transparent;
	border-bottom-color: var(--tooltip-background-color);
	left: 50%;
	bottom: 0;
	top: auto;
}

@mixin show-state {
	&.ios-safari-hover,
	&:not(.ios-safari-hover):hover,
	&:focus-visible {
		&::before,
		&::after {
			@content;
		}
	}
}

@mixin init($content-attribute: "data-storepress-tooltip") {

	[dir="rtl"] & {
		// --_arrow-x: -50%;
		--_content-x: calc(-50% - var(--_tooltip-position));
	}

	& {
		--_arrow-x: -50%;
		--_content-x: calc(-50% + var(--_tooltip-position));

		position: relative;

		@include variables();

		&::before,
		&::after {
			@include base-style();
		}

		@include show-state {
			@include hover-style();
		}

		// stylelint-disable-next-line scss/at-rule-no-unknown
		@starting-style {
			@include show-state {
				@include starting-style();
			}
		}

		&::before {
			@include content-style($content-attribute);
			@include content-position-top();
		}

		&::after {
			@include arrow-style();
			@include arrow-position-top();
		}
	}

	&.storepress-tooltip-position-top::before {
		@include content-position-top();
	}

	&.storepress-tooltip-position-top::after {
		@include arrow-position-top();
	}

	&.storepress-tooltip-position-bottom::before {
		@include content-position-bottom();
	}

	&.storepress-tooltip-position-bottom::after {
		@include arrow-position-bottom();
	}
}
